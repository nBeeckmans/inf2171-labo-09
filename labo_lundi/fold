.data 
	.eqv tlen, 10 # nombre d'éléments du tableau t
	.eqv esize, 4 # taille d'un élément de t
t:	.word 8, 1, 2, 10, 5, 5, -2, 2, 5, 4

.text
	la a0, t 
	li a1, tlen 
	li a2, esize 
	la a3, minimum 
	lw a4, 0(a0)
	
	jal fold
	
	call printInt
	
	li a0, 0
	call exit
	
fold : 
	# a0: t l’adresse du tableau
	# a1: n le nombre d’éléments du tableau
	# a2: s la taille d’un élément (en octets)
	# a3: r l’adresse de la routine à appeler
	# a4: v une valeur initiale
	
	################################
	# a0 : resultat de la reduction 
	addi sp, sp, -48
	sd s0, 0(sp)
	sd s1, 8(sp)
	sd s2, 16(sp)
	sd s3, 24(sp)
	sd s4, 32(sp)
	sd ra, 40(sp)
	
	mv s0, a0
	mv s1, a1
	mv s2, a2
	mv s3, a3 
	mv s4, a4
	
loop_fold:
	blez s1, end_loop_fold
	
	mv a0, s4
	mv a1, s0
	jalr ra, s3, 0
	
	mv s4, a0
	
	add s0, s0, s2
	addi s1, s1, -1 
	
	j loop_fold
end_loop_fold:
	mv a0, s4  
	ld s0, 0(sp)
	ld s1, 8(sp)
	ld s2, 16(sp)
	ld s3, 24(sp)
	ld s4, 32(sp)
	ld ra, 40(sp)
	addi sp, sp, 48
	ret 
	
	
# somme: additionne a0 et le mot à l'adresse a1
somme:
	lw a1, (a1)
	add a0, a0, a1
	ret

minimum :
	lw a1, 0(a1)
	blt a0, a1, passer_min
	mv a0, a1
passer_min:
	ret
